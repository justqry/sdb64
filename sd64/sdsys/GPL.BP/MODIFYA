* MODIFYA
* MODIFY.ACCOUNT verb
* Add / Delete user from group account
* Copyright (c) String Database
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 3, or (at your option)
* any later version.
* 
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
* 
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software Foundation,
* Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
* 
*
* START-HISTORY:
* rev 0.9.0 Jan 25 mab initial release
* END-HISTORY
*
* START-DESCRIPTION:
* MODIFY.ACCOUNT account <ADD/DELETE> user.name
*
* END-DESCRIPTION
*
* START-CODE

$internal
program $modify.account
$catalog $MODIFYA

$include keys.h
$include int$keys.h
$include parser.h
$include err.h
* 
deffun is_grp_member(user,group) calling '!is_grp_member'
deffun is_group(group) calling '!is_group'

   prompt ''

   if not(kernel(K$ADMINISTRATOR, -1)) then
      stop sysmsg(2001)  ;* Command requires administrator privileges
   end     

   parser = "!PARSER"

   @system.return.code = -ER$ARGS     ;* Preset for argument errors
   
   openpath @sdsys:@ds:'ACCOUNTS' to acc.f else
      @system.return.code = -status()
      stop sysmsg(6000) ;* Cannot open ACCOUNTS file in SDSYS account
   end

   call @parser(PARSER$RESET, 0, @sentence, 0)
   
   call @parser(PARSER$GET.TOKEN, token.type, token, keyword) ;* Verb modify.Account

   * Get next token, account name
   call @parser(PARSER$GET.TOKEN, token.type, acc.name, keyword)
   if token.type = PARSER$END then
      crt 'Command Syntax:  MODIFY.ACCOUNT <account> ADD | DELETE <username> '
      stop
   end
   *
   acc.name = upcase(acc.name)   ;* account names are always upper case
   if acc.name = 'SDSYS' then
      stop sysmsg(2202) ;* Account name is invalid
   end   
   *
   read acc.rec from acc.f, acc.name else      
      stop sysmsg(6003) ;* Account name is invalid
   end
   
   group.name = acc.rec<ACC$GROUP>   ;* get associated group
   
   if is_group(group.name) then
      * Get next token, ADD or DELETE
      call @parser(PARSER$GET.TOKEN, token.type, action, keyword)
      if (upcase(action) = 'ADD') or (upcase(action) = 'DELETE') then
      *  valid action
      *   Get next token, user name
         call @parser(PARSER$GET.TOKEN, token.type, user.name, keyword) 
         if token.type = PARSER$END then
            stop sysmsg(10016)  ;* Missing User Name
         end
         
         if (upcase(action) = 'ADD') then
            * Add user to group        
            * does user belong to sdusers?
            if is_grp_member(user.name,'sdusers') then
            * this user looks legit, add to group
            * first check to see if user is already a member of the group
               if is_grp_member(user.name,group.name) THEN
                  crt sysmsg(10017,user.name,group.name)  ;* %1 is already a member of group %2
               end else
                  os.execute "sudo usermod -aG ":group.name:" ":user.name
                  stat = OS.ERROR()
                  if stat = 0 then
                     crt sysmsg(10018,user.name,group.name)  ;* %1 added to group %2
                  end else
                     crt sysmsg(10019,user.name,group.name,stat) ;* Unable to add user %1 to group %s status: %2
                  end
               end 
            end else
               crt user.name
               crt sysmsg(10020,user.name) ;* %1 is not a member of sdusers, not allowed
            end 
         
         end else
            * already tested action, must be delete
            if is_grp_member(user.name,group.name) THEN
               os.execute "sudo deluser ":user.name:" ":group.name
               stat = OS.ERROR()
                  if stat = 0 then
                     crt sysmsg(10021,user.name,group.name) ;*  %1 removed from group %2
                  end else
                     crt sysmsg(10022,user.name,group.name,stat) ;* Unable to remove user %1 from group %s status: %2
                  end
            end else
               crt sysmsg(10023,user.name,group.name) ;* %1 is not a member of  %2
            end 
          
         end
         
         
      end else
         crt 'MODIFY.ACCOUNT Action Must Be Add or Delete'
      end 
   
   end else
     crt sysmsg(10024,group.name) ;* %1 is not a valid Linux Group
   end
   END
